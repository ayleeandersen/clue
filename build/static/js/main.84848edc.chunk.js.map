{"version":3,"sources":["logo.png","utils/constants.js","components/Header.js","pages/EnterCode.js","pages/Notebook.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TABS","id","name","CODES","CLUES","person","weapon","place","Header","className","src","logo","map","tab","props","active","key","onClick","clickTab","React","Component","EnterCode","state","code","valid","clues","clearInput","inputRef","current","textInput","focus","i","input","submit","includes","toLowerCase","setState","change","val","createRef","this","ref","fields","value","onChange","isValid","inputStyleInvalid","border","Notecard","App","useState","setTab","Notebook","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.84848edc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.366cf5f1.png\";","export const TABS = [\n  {\n    id: 'enterCode',\n    name: 'Enter Code',\n  }, {\n    id: 'notebook',\n    name: 'Notebook',\n  }\n];\n\n// Must be lowercase\nexport const CODES = [\n  'aaaaa',\n  '11111',\n  'a1a1a',\n];\n\nexport const CLUES = {\n  'aaaaa': {\n    person: 'Aylee',\n    weapon: 'Dog',\n    place: 'Shelley',\n  },\n  '11111': {\n    person: 'Cameron',\n    weapon: 'Computer',\n    place: 'Ogden',\n  },\n  'a1a1a': {\n    person: 'Kerstin',\n    weapon: 'P-Card',\n    place: 'Logan',\n  },\n}","import React from 'react';\n\nimport { TABS } from '../utils/constants';\nimport logo from '../logo.png';\n\nclass Header extends React.Component {\n  render() {\n    return <div className='header'>\n      <img src={logo} className='logo' />\n      <div className='tabs'>\n        {TABS.map(tab => (\n          <div\n            className={`tab ${tab.id === this.props.active ? 'active' : ''}`}\n            key={tab.id}\n            onClick={() => this.props.clickTab(tab.id)}\n          >\n            {tab.name}\n          </div>\n        ))}\n      </div>\n    </div>;\n  }\n}\n\nexport default Header","import React from 'react';\nimport ReactCodeInput from 'react-code-input';\n\nimport { CODES, CLUES } from '../utils/constants';\n\nclass EnterCode extends React.Component {\n  constructor(props) {\n    super(props);\n    this.inputRef = React.createRef();\n  }\n\n  state = {\n    code: '',\n    valid: true,\n    clues: null,\n  };\n\n  clearInput = () => {\n    if (this.inputRef.current.textInput[0]) {\n      this.inputRef.current.textInput[0].focus();\n    }\n    for (let i = 0; i < 5; i ++) {\n      this.inputRef.current.state.input[i] = '';\n    }\n  }\n\n  submit = () => {\n    const { code } = this.state;\n    if (CODES.includes(code.toLowerCase())) {\n      this.setState({ code: '', clues: CLUES[code] });\n      this.clearInput();\n    } else {\n      this.setState({ valid: false, clues: null });\n      this.inputRef.current.textInput[0].focus();\n    }\n  }\n\n  change = val => {\n    this.setState({ code: val, valid: true });\n  }\n\n  render() {\n    const { code, valid, clues } = this.state;\n\n    return (\n      <div className='body'>\n        <p>Enter a code you found from a puzzle to get your next clues</p>\n        <ReactCodeInput\n          ref={this.inputRef}\n          fields={5}\n          className='code-input'\n          value={code}\n          onChange={this.change}\n          isValid={valid}\n          inputStyleInvalid={{ border: '2px solid #9F2D33' }}\n        />\n        <button className='submit' onClick={this.submit}>\n          Submit\n        </button>\n        {!valid && (\n          <>\n            <h1 className='result'>Incorrect</h1>\n            <p>If you get stuck, ask one of the helpers for a hint!</p>\n          </>\n        )}\n        {clues && (\n          <>\n            <h1 className='result'>Correct</h1>\n            <p>{clues.person}</p>\n            <p>{clues.weapon}</p>\n            <p>{clues.place}</p>\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default EnterCode","import React from 'react';\n\nclass Notecard extends React.Component {\n  render() {\n    return <h1>Hello, Aylee's Notecard</h1>;\n  }\n}\n\nexport default Notecard","import React, { useState } from 'react';\n\nimport Header from './components/Header';\nimport EnterCode from './pages/EnterCode';\nimport Notebook from './pages/Notebook';\n\nimport './App.css';\n\nfunction App() {\n  const [tab, setTab] = useState('enterCode');\n\n  const clickTab = id => {\n    setTab(id)\n  }\n\n  return (\n    <div className=\"App\">\n      <Header active={tab} clickTab={clickTab} />\n      {tab === 'enterCode' && <EnterCode />}\n      {tab === 'notebook' && <Notebook />}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}